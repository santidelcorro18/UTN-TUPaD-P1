# 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
#funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario

def calcular_factorial(numero):
    if numero == 0:
        return 1
    else:
        return  numero * calcular_factorial(numero - 1)
        
numero = int(input("Ingrese un numero: "))
for i in range(0, numero + 1):
    print(f"Los facotriales compuestos entre 1 y el numero ingresado son:", calcular_factorial(i))

#2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
#indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

def calcular_fibonacci(num):
    if num == 0:
        return 0
    if num == 1:
        return 1
    else:
        return calcular_fibonacci(num - 1) + calcular_fibonacci(num - 2)

posicion = int(input("Ingrese  hasta que posicion desea ver la serie de Fibonacci: "))
for i in range(posicion):
    print(calcular_fibonacci(i), end=" ")

#3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
#exponente, utilizando la f√≥rmula ùëõ
#ùëö = ùëõ ‚àó ùëõ(ùëö‚àí1).  Prueba esta funci√≥n en un algoritmo general.

def potencia(base, exponente):
    if exponente == 0:
        return 1
    return base * potencia(base, exponente - 1)

print(potencia(2, 3))


#4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
#decimal y devuelva su representaci√≥n en binario como una cadena de texto.

def decimal_a_binario(num):
    if num <= 0:
        return "El numero ingresado no es valido"
    elif num == 1:
        return "1"
    else:
        return decimal_a_binario(num // 2) + str(num % 2)

num = int(input("Ingrese un numero para convertir a binario: "))
print("El resultado en binario del numero ingresado es:", decimal_a_binario(num))   

#5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
#cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es

def es_palindromo(palabra, inicio = 0, fin = None):
    if fin is None:
        fin = len(palabra) - 1
    if inicio >= fin:
        return True
    if palabra[inicio] != palabra[fin]:
        return False
    return es_palindromo(palabra, inicio + 1,fin -1)

palabra = input("Ingrese una palabra para saber si es o no un palindromo: ")
print(es_palindromo(palabra))
     
#6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
#n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.

def suma_digitos(n):
    if n == 0:
        return "El numero ingresado no es valido, intente nuevamente"
    elif n < 10:
        return n
    else:
        return (n % 10) + suma_digitos(n // 10)

n = int(input("Ingrese un numero entero y positivo para sumar sus digitos: "))
print("La suma de los digitos del numero ingresado es la siguiente:", suma_digitos(n))

#7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n
#bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al
#√∫ltimo nivel con un solo bloque.

#Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
#nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
#pir√°mide.

#Ejemplos:

#contar_bloques(1) ‚Üí 1 (1)
#contar_bloques(2) ‚Üí 3 (2 + 1)
#contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1)

def contar_bloques(n):
    if n == 1:
        return 1
    else:
        return n + contar_bloques(n - 1)

print(contar_bloques(1))
print(contar_bloques(2))
print(contar_bloques(4))

#8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
#n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
#aparece ese d√≠gito dentro del n√∫mero.

#Ejemplos:

#contar_digito(12233421, 2) ‚Üí 3
#contar_digito(5555, 5) ‚Üí 4 
#contar_digito(123456, 7) ‚Üí 0 

def contar_digito(numero, digito):
    if numero == 0:
        return 0
    else:
        ultimo = numero % 10
        if ultimo == digito:
            return 1 + contar_digito(numero // 10, digito)
        else:
            return contar_digito(numero // 10, digito)

print(contar_digito(12233421, 2))
print(contar_digito(5555, 5))
print(contar_digito(123456, 7))

numero = int(input("Ingrese un n√∫mero entero positivo: "))
digito = int(input("Ingrese el d√≠gito a contar (0-9): "))

resultado = contar_digito(numero, digito)

print(f"El d√≠gito {digito} aparece {resultado} veces en {numero}.")